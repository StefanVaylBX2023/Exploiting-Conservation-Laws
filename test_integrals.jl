
@testset "Finding res" begin
    cases = [
        Dict(
            :ode => @ODEmodel(
                x1'(t) = -k1 * x1(t) * x2(t) + k2 * x4(t) + k4 * x6(t),
                x2'(t) = -k1 * x1(t) * x2(t) + k2 * x4(t) + k3 * x4(t),
                x3'(t) = k3 * x4(t) + k5 * x6(t) - k6 * x3(t) * x5(t),
                x4'(t) = k1 * x1(t) * x2(t) - k2 * x4(t) - k3 * x4(t),
                x5'(t) = k4 * x6(t) + k5 * x6(t) - k6 * x3(t) * x5(t),
                x6'(t) = -k4 * x6(t) - k5 * x6(t) + k6 * x3(t) * x5(t),
                y1(t) = x3(t)
            ),
            :res => @ODEmodel(
                x1'(t) = -k4*x5(t) + k4*c3 + k2*x4(t) + k1*x1(t)*x4(t) - k1*x1(t)*c1
                x4'(t) = -k3*x4(t) - k2*x4(t) - k1*x1(t)*x4(t) + k1*x1(t)*c1
                x5'(t) = -k5*x5(t) + k5*c3 - k4*x5(t) + k4*c3 - k6*x5(t)^2 + k6*x5(t)*x1(t) + k6*x5(t)*x4(t) + k6*x5(t)*c2
                y1(t) = x5(t) - x1(t) - x4(t) - c2
            )
        ),
        Dict(
            :ode => @ODEmodel(
                x1'(t) = -x1(t)-2*x3(t)+x2(t)+x4(t)^2,
                x2'(t) = 2*x3(t)-x4(t)^2+x1(t)-x2(t),
                x3'(t) = -x1(t)+x2(t)-2*x3(t)+x4(t)^2,
                y1(t) = x1(t),
                y2(t) = x2(t),
                y3(t) = x3(t)
            ),
            :res => @ODEmodel(
                x3'(t) = -4*x3(t) + x4(t)^2 - c1 + 2*c2
                y3(t) = x3(t)
                y1(t) = x3(t) + c1 - c2
                y2(t) = -x3(t) + c2
            )
        ),
        Dict(
            :ode => @ODEmodel(
                S'(t) = -b * ln(t) * S(t) // (S(t) + L(t) + ln(t) + R(t) + Q(t)) - u(t) * S(t) // (S(t) + L(t) + ln(t) + R(t) + Q(t)),
                L'(t) = b * ln(t) * S(t) // (S(t) + L(t) + ln(t) + R(t) + Q(t)) - a * L(t),
                ln'(t) = a * L(t) - g * ln(t) + s * Q(t),
                R'(t) = u(t) * S(t) // (S(t) + L(t) + ln(t) + R(t) + Q(t)) + e * g * ln(t),
                Q'(t) = (1 - e) * g * ln(t) - s * Q(t),
                y1(t) = ln(t) // (S(t) + L(t) + ln(t) + R(t) + Q(t))
            ),
            :res => @ODEmodel(
                L'(t) = (b*S(t)*ln(t) - a*L(t)*c1)//c1
                S'(t) = (-b*S(t)*ln(t) - S(t)*u(t))//c1
                ln'(t) = s*Q(t) - g*ln(t) + a*L(t)
                Q'(t) = -e*g*ln(t) - s*Q(t) + g*ln(t)
                y1(t) = ln(t)//c1
                )
        ),
        Dict(
            :ode => @ODEmodel(
                Sh'(t) = mh * (Sh(t) + Lh(t) + Ih(t) + Rh(t)) - bv * Sh(t) * Iv(t) // (Sh(t) + Lh(t) + Ih(t) + Rh(t)) - mh * Sh(t),
                Lh'(t) = bv * Sh(t) * Iv(t) // (Sh(t) + Lh(t) + Ih(t) + Rh(t)) - ah * Lh(t) - mh * Lh(t) ,
                Ih'(t) = ah * Lh(t) - gh * Ih(t) - mh * Ih(t),
                Rh'(t) = gh * Ih(t) - mh * Rh(t),
                Sv'(t) = mv * (Sv(t) + Lv(t) + Iv(t))- bh * Sv(t) * Ih(t) // (Sh(t) + Lh(t) + Ih(t) + Rh(t)) - mv * Sv(t),
                Lv'(t) = bh * Sv(t) * Ih(t) // (Sh(t) + Lh(t) + Ih(t) + Rh(t)) - av * Lv(t) - mv * Lv(t),
                Iv'(t) = av * Lv(t) - mv * Iv(t),
                y1(t) = Ih(t) // (Sh(t) + Lh(t) + Ih(t) + Rh(t))
            ),
            :res => @ODEmodel(
                    Lv'(t) = (-bh*Iv(t)*Ih(t) - bh*Ih(t)*Lv(t) + bh*Ih(t)*c1 - mv*Lv(t)*c2 - av*Lv(t)*c2)//c2
                    Lh'(t) = (-bv*Iv(t)*Rh(t) - bv*Iv(t)*Ih(t) - bv*Iv(t)*Lh(t) + bv*Iv(t)*c2 - Lh(t)*ah*c2 - Lh(t)*mh*c2)//c2
                    Iv'(t) = -Iv(t)*mv + av*Lv(t)
                    Ih'(t) = -gh*Ih(t) - Ih(t)*mh + Lh(t)*ah
                    Rh'(t) = gh*Ih(t) - Rh(t)*mh
                    y1(t) = Ih(t)//c2
            )
        )

    ]

    for c in cases
        result = perform_substitution(c[:ode])
        
        @test ((result.x_equations == c[:res].x_equations) && (result.y_equations == c[:res].y_equations))
    end
end
