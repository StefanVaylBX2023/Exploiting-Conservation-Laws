# return all monomials in the ODE
# TODO: I think that it may be confusing that the input is a dictionary but only values are used
# I suggest that the function takes as input just a list (or any collection) of polynomials
# then to be called as `find_all_monomials(values(xeq))`
function find_all_monomials(xeq)
    # TODO: see the comment on the next line
    # is L is a list of sets, takin union can be done by `reduce(union, L)`, so the code below can be made more concise
    monoms = Set{fmpq_mpoly}()
    for (x,f) in xeq
        temp = collect(monomials(f))
        union!(monoms, temp)
    end
    return monoms
end


#create zero matrix with the right dimensions (number of equations x number of monomials )
# TODO: the name is a confusing since the created matrix does not correspond to the monomials and x_eq but it 
# is just an empty matrix.
# I propose to merge the four functions below into a single one returning a matrix and legend.
function create_matrix(monoms, xeq)
    # TODO: no need to do `collect` to compute the length. Furthermore, no need to do `values` you can take the length of a dictionary
    S = Nemo.MatrixSpace(Nemo.QQ, length(collect(values(xeq))), length(monoms))
    return zero(S)
end


# create a mappings which further will be used to fill the matrix with coefficients
function matrix_legend(monoms, xeq)
    map_monom = Dict(monomial => i for (i,monomial) in enumerate(monoms))
    # TODO: spaces after comma
    map_eq = Dict{fmpq_mpoly, Int64}(x => i for (i,(x,f)) in enumerate(xeq))
    return map_eq, map_monom
end

# fill the matrix with coefficients
function fill_matrix(xeq, matrix, map_eq, map_monom)

    for (x,f) in xeq
        for term in (terms(f))
                # TODO: spaces
                matrix[map_eq[x],map_monom[collect(monomials(term))[1]]] = first(coefficients(term)) 
        end
    end
    return matrix
end


function matrix_constructor(xeq)
    monoms = find_all_monomials(xeq)
    matrix = create_matrix(monoms, xeq)
    map_eq, map_monom = matrix_legend(monoms, xeq)
    matrix = fill_matrix(xeq, matrix, map_eq, map_monom)
    return matrix, map_eq
end
