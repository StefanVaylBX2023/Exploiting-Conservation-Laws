# function returns maximum exponent of variable in the ODE
function get_max_exp(ode,var)
    xs = union(ode.x_vars,ode.u_vars)
    map_exp = Dict{fmpq_mpoly, Int64}()
    for x in xs
        map_exp[x] = 0
    end
    for (x,f) in ode.x_equations
        for variable in xs
            map_exp[variable] = max(map_exp[variable],degree(f,variable))
        end
    end
    return map_exp[var]
end

# function returns occurence in non trivial(x1^2 doesn't count, x1^2*x2 does) monomials (monom_occur), 
# total occurence of variable (total_occur)
# and maximum coefficient of variable (max_coef)
function get_paramters(ode, var)
    total_occur = 0
    monom_occur = 0
    max_coef = 0
    for (x,f) in ode.x_equations
        monoms = collect(monomials(f))
        terms_ = collect(terms(f))
        for x in monoms
            if var in vars(x)
                total_occur += 1  
            end
            if (var in vars(x)) && (length(vars(x)) >=2)
                monom_occur += 1
            end
        end
        for x in terms_
            if var in vars(x) && abs(collect(coefficients(x))[1]) > max_coef
                max_coef = abs(collect(coefficients(x))[1])
            end
        end
    end
    return monom_occur, total_occur, max_coef
end

# return map from variables to their ranks
function map_var2par(ode, candidates)
    ranks = Dict()
    for x in candidates
        ranks[x] = [get_max_exp(ode,x), get_paramters(ode, x)[1], get_paramters(ode, x)[2], get_paramters(ode, x)[3]]
    end
    return ranks
end

# function returns variable with the highest priority
function get_priority2(mappings)
    to_compare = collect(values(mappings))
    to_compare = [to_compare[i] for i in 1:length(to_compare) if to_compare[i][1] > 0]
    minimum = min(to_compare...)
    vars = [k for (k,v) in mappings if v == minimum]
    return vars[1]
end


# build function for this section
function find_priority(ode,candidates)
    
    println(candidates)
    mappings = map_var2par(ode, candidates)
    println(mappings)
    return get_priority2( mappings)[1]
end
